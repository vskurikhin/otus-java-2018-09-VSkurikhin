https://docs.google.com/document/d/17TDrdzkxzfEZbB9AKVMQdoN3nFLgXvHw4UAnPeczZ0U/edit?usp=sharing

В рамках данного задания необходимо познакомиться с архитектуройсовременных enterprise (и не только) приложений, а также практически научиться выделять основные уровни/звенья, на которых оно базируется на примере некоторойинформационнойсистемы (ИС). 
1.    Какие основные модели приложенийВам известны? Приведите примеры каждого из известных случаев. 
2.    Объясните разницу между ними, в каких случаях стоит применять тот или инойподход? 
3.    Как Вы понимаете, что скрывается за понятиями тонкого и толстого клиента. Приведите 
пример яркого представителя thin-клиента. 
4.    Какая модель является наиболее популярнойна текущиймомент в мире и отлично 
подходит для большинства решенийуровня enterprise? 
________________
 
1.  По моделям приложений, опишу те модели с которыми я сталкивался во временном порядке, по мере ознакомления:
* Базовая модель это монолитные приложения, познакомился с ними еще на заре процессоров Intel(286, 386) под операционной системой MS-DOS года 90-е прошлого века. Но данная модель до сих пор используется, как пример это офисные приложения или многочисленные редакторы и однопользовательские приложения и etc…
* Следующая модель с которой столкнулся в конце 90-х это файл-серверная модель. Наиболее популярными файл серверными системами на тот момент мыли системы NovellNetWareа одно из популярных приложений использующих эту модель, на тот момент времени в РФ, было 1С-Бухгалтерия.
* Плотно получилось поработать (в основном внедрение, конец 90-х начало 
2000-х) с клиент-серверной моделью. В этом качестве стоит рассказать про специализированные геоинформационные системы, в данных системах мета, гео и справочная информация хранилась  реляционной базе данных (использовались RDBMS: Interbase или Oracle) а растровые и векторные карты записывались и обновлялись на толстых клиентах.
* На текущий момент большинство решений которые приходиться поддерживать строятся на основе 3-й уровневой и более архитектуре. В основном это 4-х или 5-ти уровневая архитектура состоящая из:           
1. Тонкого клиента или мобильного приложения.       
2.  Как правило HTTP-северов с web-интерфейсом или JSON-API.            
3. Серверов бизнес логики(Application servers).         
4. Серверов обмена сообщениями (Middleware servers).         
5. Серверов Баз Данных (Database servers).  
* «Модное» направление - микросервисная архитектура. Опыта пока не имею. Ознакомился с базовыми концепциями на семинаре RedHat Apache Camel.
2.   Каждый из этих моделей хорош под свои задачи. Как и упоминалось монолитные приложения до сих пор используются для офисных нужд, хотя и в этой области есть серьезные инновации например google-office. Клиент серверные приложения так же достаточно распространены, например 1С:Предприятие 8.  
3.  Система как правило с текстовым или графическим интерфейсом для взаимодействия пользователя с (как правило) многоуровневым приложением. Примером тонкого клиента может служить компьютер с браузером, использующийся для работы с веб-приложениями.  
4.  В текущий момент наиболее популярной на больших и средних предприятиях является многоуровневая модель, благодаря таким преимуществам как  масштабируемость, как вертикально так и горизонтально, гибкость и модульность. Например многие компоненты при грамотном планировании и архитектурном решении можно заменять «прозрачно» для клиента.
 
Следующая часть задания включает практическое выделение слоев отдельно взятойИС: 
Представим ситуацию: имеется в распоряжении организация «Рога и Копыта», сотрудники которойимеют доступ к некоторойвнутреннейИС. В этойсистеме хранится информация о всех сотрудниках организации, обратиться к которойможно согласно предоставленному уровню доступа (ролевое разграничение доступа) по следующим правилам: 
1. Каждыйзарегистрированныйсотрудник (имеющийлогин/пароль для входа в систему) может получить информацию о любом другом сотруднике: ФИО, название подразделения и город, в котором он/она работает, должность, внутреннийномер телефона сотрудника, а также личныйпочтовыйящик 
2. Бухгалтера имеют доступ к заработнойплате каждого сотрудника с возможностью ее индексации (увеличения) и депремирования 
3. HR-специалисты способны редактировать персональную информацию о каждом, кроме оклада, а также удалять сотрудников из реестра 
4. Директор компании (представлен в системе в единственном экземпляре) имеет все права, описанные выше. 
От Вас требуется обозначить основные уровни приложения, которые важны во время ее разработки, с кратким описанием предназначения каждого из них. Попытайтесь ответить на вопрос: «Почему этот слойвообще представлен и есть ли возможность его не использовать?». 
Решение даннойзадачи позволит в последующих заданиях более детально сконцентрироваться на каждом из перечисленных уровнейв отдельности.
________________


1. Воспользовавшись многоуровневой моделью выберем 3-х уровневую модель:
   1. Тонкий клиент (web-браузер для сотрудников) или мобильное приложение для.
   2. Серверов (кластера серверов) бизнес логики (Application servers).   
   3. Серверов (кластера серверов) Баз Данных (Database servers).             
1. Тонкий клиент взаимодействует через необходимый API с требуемыми сервисами.
2. Сообразно поставленной задаче логично выделить следующие модули:
   1. Реестр сотрудников.
   2. Модуль бухгалтерии.
   3. Каталог подразделений.
   4. Редактор Каталога подразделений и реестра сотрудников.
1. На уровне сервисов сосредоточена бо́льшая часть бизнес-логики, так же этот уровень проектируются таким образом, чтобы добавление к ним дополнительных экземпляров обеспечивало простое масштабирование производительности  серверов приложений.
2. Следующий уровень это слой данных, обеспечивает хранение данных, реализуется средствами СУБД и специализированными каталогами например LDAP, подключение к этому компоненту обеспечивается только с уровня сервера приложений.